;; remember for emacs: (setq drivable/sibilant-preamble-file "macro.sibilant")

(comment
 (DB.find {$exists: "session"}
          (#(err, docs)
            (when docs
                  (var state (control-state))
                  (m-transact!
                   (set state 'session-list ["a" "b"]))
                  (console.log docs)))))

(scoped
 (def make-session (url name)
      {url: url
       name: name
       history: []
       })
 (var ui-state {selected-tab: (m.prop 'saved-urls)})

 (def render-session-list (session-list)
      (var asess (control-state.active-session)
           td-style {border: "1px solid gray"
                     padding: "0.5em" }
           ;; STRUCTURE: [key, [header?], [renderer?]]
           ;; - key
           ;; - use 2nd as header if present
           ;; - use last as renderer if a function
           hdr-list [['history
                      "# actions"
                      (#(hist)
                        (+ ""
                           (get hist 'length)
                           " actions"))]
                     ['name]
                     ['url]
                     ['filename]
                     ])
      ["table"
       {style: {border-collapse: "collapse"
                border: "1px solid black"
                width: "100%"
                padding: "0.5em"}
        }
       ["tr"
        (mapcar (#(hdr)
                  ["th" (if (typeof (= "string" (second hdr)))
                            (second hdr)
                            (first hdr))])
                hdr-list)]
       (mapcar (#(sess)
                 ["tr"
                  {style: {border: "1px solid gray"
                           background: (if (= sess.filename
                                              (maybe-get asess 'filename))
                                           "yellow"
                                           "")}
                   onclick: (#>
                             (control-state.active-session sess)
                             (ui-state.selected-tab 'action-list))
                   }
                  (mapcar
                   (#(hdr)
                     (var key (first hdr)
                          maybe-func (last hdr)
                          renderer (if (= "function" (typeof maybe-func))
                                       maybe-func
                                       identity))
                     ["td"
                      {style: td-style }
                      (renderer (get sess key))])
                   hdr-list)])
               session-list)])

 (def action-list-item (locater i)
      ["li"
       ["div"
        (scoped
         ;; delete button
         (var asess (control-state.active-session)
              cur-hist asess.history)
         ["button"
          {style: {margin: "0.2em"
                    width: "1.3em"
                    height: "1.3em"
                    lineHeight: "1.3em"
                    color: "white"
                    align: "center"
                    textAlign: "center"
                    verticalAlign: "middle"
                    borderRadius: "3px"
                    backgroundColor: "red" }
           onclick: (#>
                     (var head (cur-hist.slice 0 i)
                          tail (cur-hist.slice (+ 1 i)))
                     (set asess 'history (head.concat tail))
                     (set asess 'is-dirty true)
                     (control-state.active-session asess)) }
          ["i" {class: "fa fa-times" } ]])
        ["button"
         {onclick: (#>
                     (var exec-string
                          (if (or (= locater.tag "button")
                                  (= locater.tag "a")
                                  (and (= locater.tag "input")
                                       (or (= locater.type "submit")
                                           (= locater.type "button"))))
                              (+ "common.click_selector('" locater.selector "')")
                    
                              true
                              (+ "document.querySelector('"
                                 locater.selector
                                 "').scrollIntoView({behavior: \"smooth\"})")
                              
                              null
                              ;; (+ "common.fire_event_on('" locater.selector "', 'Click')")
                              ))
                     (when exec-string
                           (|> (get_webview)
                               (execjs
                                exec-string)))
                     ) }
         (JSON.stringify locater)]]])
 (def action-list-view ()
      (var sess (control-state.active-session))
      (if sess
          ["div"
           (if sess.name
               ["h1" sess.name]
               "")
           ["hr"]
           ["a"
            {style: {margin: "0.2em"
                     padding: "0.1em"
                     border: "1px solid blue"
                     background: "lightblue"
                     border-radius: "4px"
                     cursor: "pointer"}
             onclick: (#> (set-webview-url sess.url))}
            sess.url]
           ["hr"]
           ["ol"
            {style: {margin: "0.5em"
                     padding: "0.5em"}}
            (mapcar action-list-item sess.history)]]))

 (var ui {controller: (#>
                       (console.info "in controller")
                       {})
          tab-def: {saved-urls: {label: "saved urls"

                                 ;; find out nicer way to DRY
                                 bare-state: {name: null
                                              url: null}
                                 state: (m.prop {name: null
                                                 url: null})
                                 render: (#>
                                          (var self this)
                                          [ ["b" "new session"]
                                           ["hr"]
                                           ["div"
                                            ["div"
                                             ["label"
                                              ["input"
                                               {type: "text"
                                                placeholder: "url"
                                                size: 40
                                                onchange: (#(evt)
                                                            (var cur-state (self.state))
                                                            (set cur-state 'url evt.target.value)
                                                            (self.state cur-state)
                                                            )} ]
                                              "session url" ]]
                                            ["div"
                                             ["label"
                                              ["input"
                                               {type: "text"
                                                placeholder: "name"
                                                size: 40
                                                onchange: (#(evt)
                                                            (var cur-state (self.state))
                                                            (set cur-state 'name evt.target.value)
                                                            (self.state cur-state)
                                                            )}]
                                              "session name (optional)"]]
                                            ["div"
                                             ["button"
                                              {onclick: (#>
                                                         (var lstate (self.state)
                                                              url (get lstate 'url)
                                                              name (get lstate 'name))
                                                         (when (and url name)
                                                               (var new-session (make-session url name))
                                                               (set new-session 'filename
                                                                    (|> (new Date)
                                                                        (.toISOString)
                                                                        (.substring 0 10)
                                                                        (+ "_"
                                                                           (.replace (get new-session 'url)
                                                                                     (regex "^(.+://)")
                                                                                     "")
                                                                           ".yml")))
                                                               (m-transact!
                                                                (self.state self.bare-state)
                                                                (|> (control-state.session-list)
                                                                    (.push new-session))
                                                                (control-state.active-session
                                                                 new-session)))
                                                         )}
                                              "start new session"]]
                                            ]
                                           ["hr"]
                                           ["b" "sessions:"]
                                           ["hr"]
                                           (render-session-list
                                            (control-state.session-list)
                                            )]
                                          )
                                 }
                    action-list: {label: "action list"
                                  render: action-list-view
                                  
                                  }}
           view: (#(ctrl)
                   (var self this ;; self.view is the view object here, for example
                        table (|> (miccup
                                   ["div"
                                     {style: {position: "relative"
                                                float: "left"
                                                background: "#444"
                                                color: "#fff"
                                                padding: "2px"
                                                margin: "2px"
                                                width: "100%"
                                                height: "100%"
                                                } }
                                     ["style"
                                       "ul.tab-list { list-style-type: none }"
                                       "ul.tab-list li { float: left; border: 1px solid red; margin: 2px; padding: 2px; width: 100px; }"
                                       "ul.tab-list li:hover { background: gray; color: black; }"
                                       "ul.tab-list li.active { background: white; color: black; }"
                                       ]
                                     (scoped
                                      ["ul.tab-list"
                                        {}
                                        (mapcar (#(k i)
                                                  [(+ "li"
                                                      (if (= k (ui-state.selected-tab))
                                                          ".active"
                                                          ""))
                                                    {onclick: (#>
                                                                (ui-state.selected-tab k)) }
                                                    (get self.tab-def k 'label)])
                                                (Object.keys self.tab-def))
                                        ])
                                     ["div" {style: {clear: "both" } }]
                                     ["div"
                                       {style: {width: "100%"
                                                  height: "100%"
                                                  color: "black"
                                                  background: "white"
                                                  }}
                                      ;; note function call
                                      ((|> (ui-state.selected-tab)
                                           (get self.tab-def #)
                                           (get 'render)))
                                      ]
                                     ]))))})
 (m.mount (document.getElementById "control-container")
          ui))
