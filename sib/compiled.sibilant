(console.log "sibilant from compiled file")
(include "./macro")
(include "./universal")

(set window 'Datastore (require "nedb"))
(var DB (new Datastore { filename: "store.db"
                         autoload: true
                         timestampData: true })
     ;;  currently not used
     db { load: (#>
                 (DB.findOne
                  { url: (get-webview-url) }
                  (#(err, doc)
                    (m-transact!
                     (when doc
                           (get doc 'click-history)
                           )))))
          save: (#>
                 (DB.insert { url: (get-webview-url)
                              'click-history: [] }))
          }
     jsyaml (require "js-yaml"))

;; robotjs
(try
 (set window 'robot (require "robotjs"))
 (scoped
  (set window 'robot { moveMouse: (#(_ _)
                                    (console.log "TODO: mouse fallback")) })))

;; utility
(def set-webview-url ()
     ;; arguments is NOT an array!!!
     (var arglist (Array.prototype.slice.call arguments)
          wv-idx (if (= 1 (length arglist))
                     0
                     (first arglist))
          url (if (= 1 (length arglist))
                  (first arglist)
                  (last arglist)))
     (|> (get_webview wv-idx)
         (.setAttribute "src" url)))

(def get-webview-url (wv-idx)
     (|> (get_webview wv-idx)
         (.getAttribute "src")))

(def miccup (hiccup)
     (if (not (Array.isArray hiccup))
         hiccup
         
         (empty? hiccup)
         hiccup

         (Array.isArray (first hiccup))
         ;; nested array
         (scoped
          (var out [])
          (each (hh i) hiccup
                (when (< 0 hh.length)
                      (out.push (miccup hh))))
          out)
         
         ;; normal hiccup
         (scoped
          (var tag (first hiccup)
               maybe-attr (second hiccup)
               has-attr? (and (= (typeof maybe-attr) "object")
                              (not (Array.isArray maybe-attr)))
               attr (if has-attr? maybe-attr {})
               remainder-start (if has-attr? 2 1)
               out [tag attr])
          (each (hh i) (hiccup.slice remainder-start)
                (out.push (miccup hh)))
          (apply m out))))

;; yaml based data control
(var jsyaml (require "js-yaml")
     fs (require "fs")
     electron (require "electron")
     DATA-DIR "data"
     __data-dir-path (|> (path.join global.__dirname DATA-DIR)
                         (path.resolve)))

;; housekeeping
(when (not (fs.existsSync __data-dir-path))
      (fs.mkdirSync __data-dir-path))

(var control-state {session-list: (m.prop [])
                    active-session: (m.prop)})

(var WebViewDriver { exec: (#(channel arg)
                       (var func (get WebViewDriver channel))
                       (when func (func arg))) })
(set WebViewDriver Const.WEBVIEW_ELEMENT_CLICK
     (#(js)
       (var asess (control-state.active-session))
       (if (not asess)
           (alert "no active session")
           (m-transact!
            (var locater (JSON.parse js))
            (asess.history.push locater)
            (control-state.active-session asess)))))
(set window 'WebViewDriver WebViewDriver)

(fs.readdir
 __data-dir-path
 (#(err file-list)
   (var re-yml (regex "yml$"))
   (m-transact!
    (control-state.session-list
     (|> file-list
         (.filter (#(fname)
                    (fname.match re-yml)))
         (.map (#(fname)
                 (|> (path.join __data-dir-path fname)
                     (fs.readFileSync "utf-8")
                     (jsyaml.safeLoad)
                     (tap (set 'filename fname))))))))))
