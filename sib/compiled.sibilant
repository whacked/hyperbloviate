(console.log "sibilant from compiled file")

(def set-webview-url ()
     (var wv-idx (if (= 1 (length arguments))
                     0
                     (first arguments))
          url (if (= 1 (length arguments))
                  (first arguments)
                  (last arguments)))
     (|> (get_webview wv-idx)
         (.setAttribute "src" url)))

(def get-webview-url (wv-idx)
     (|> (get_webview wv-idx)
         (.getAttribute "src")))

(set window 'Datastore (require "nedb"))
(var DB (new Datastore { filename: "store.db"
                         autoload: true
                         timestampData: true })
     db { load: (#>
                 (DB.findOne
                  { url: (get-webview-url) }
                  (#(err, doc)
                    (m.startComputation)
                    (when doc
                          (click-hist (get doc 'click-history)))
                    (m.endComputation))))
          save: (#>
                 (DB.insert { url: (get-webview-url)
                              'click-history: (click-hist) }))
          }
     jsyaml (require "js-yaml"))

(def miccup (hiccup)
     (if (not (Array.isArray hiccup))
         hiccup
         
         (empty? hiccup)
         hiccup

         (Array.isArray (first hiccup))
         ;; nested array
         (scoped
          (var out [])
          (each (hh i) hiccup
                (when (< 0 hh.length)
                      (out.push (miccup hh))))
          out)
         
         ;; normal hiccup
         (scoped
          (var tag (first hiccup)
               maybe-attr (second hiccup)
               has-attr? (and (= (typeof maybe-attr) "object")
                              (not (Array.isArray maybe-attr)))
               attr (if has-attr? maybe-attr {})
               remainder-start (if has-attr? 2 1)
               out [tag attr])
          (each (hh i) (hiccup.slice remainder-start)
                (out.push (miccup hh)))
          (apply m out))))

(def mapcar (func list)
     (var rtn [])
     (each (o i) list
           (rtn.push (func o i)))
     rtn)

