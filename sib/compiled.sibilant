(console.log "sibilant from compiled file")
(include "./macro")
(include "./universal")

(set window 'Datastore (require "nedb"))
(var DB (new Datastore { filename: "store.db"
                         autoload: true
                         timestampData: true })
     ;;  currently not used
     db { load: (#>
                 (DB.findOne
                  { url: (get-webview-url) }
                  (#(err, doc)
                    (m-transact!
                     (when doc
                           (get doc 'click-history)
                           )))))
          save: (#>
                 (DB.insert { url: (get-webview-url)
                              'click-history: [] }))
          }
     jsyaml (require "js-yaml"))

;; robotjs
(try
 (set window 'robot (require "robotjs"))
 (scoped
  (set window 'robot { moveMouse: (#(_ _)
                                    (console.log "TODO: mouse fallback")) })))

;; utility
(def set-webview-url ()
     ;; arguments is NOT an array!!!
     (var arglist (Array.prototype.slice.call arguments)
          wv-idx (if (= 1 (length arglist))
                     0
                     (first arglist))
          url (if (= 1 (length arglist))
                  (first arglist)
                  (last arglist)))
     (|> (get_webview wv-idx)
         (.setAttribute "src" url)))

(def get-webview-url (wv-idx)
     (|> (get_webview wv-idx)
         (.getAttribute "src")))

(def m-miccup (miccup)
     ;; miccup to mithril
     (if (not (Array.isArray miccup))
         miccup
         
         (empty? miccup)
         miccup

         (Array.isArray (first miccup))
         ;; nested array
         (scoped
          (var out [])
          (each (hh i) miccup
                (when (< 0 hh.length)
                      (out.push (m-miccup hh))))
          out)
         
         ;; normal miccup
         (scoped
          (var tag (first miccup)
               maybe-attr (second miccup)
               has-attr? (and (= (typeof maybe-attr) "object")
                              (not (Array.isArray maybe-attr)))
               attr (if has-attr? maybe-attr {})
               remainder-start (if has-attr? 2 1)
               out [tag attr])
          (each (hh i) (miccup.slice remainder-start)
                (out.push (m-miccup hh)))
          (apply m out))))

(def jq-miccup (miccup)
     ;; miccup to DOM via jquery
     (if (or (not (Array.isArray miccup))
             (empty? miccup))
         miccup
         
         (Array.isArray (first miccup))
         ;; nested array
         (with-return-var
          out []
          (each (hh i) miccup
                (when (< 0 hh.length)
                      (out.push (jq-miccup hh)))))

         ;; normal miccup
         (scoped
          (var tag (first miccup)
               maybe-attr (second miccup)
               has-attr? (and (= (typeof maybe-attr) "object")
                              (not (Array.isArray maybe-attr)))
               attr (if has-attr? maybe-attr {})
               style (or (get attr "style") {}))
          (delete (get attr "style"))
          (var out (|> ($ (document.createElement tag))
                       (.attr attr)
                       (.css style))
               i (if has-attr? 2 1))
          (while (< i miccup.length)
                 (var hh (get miccup i))
                 (incr i)
                 (out.append (jq-miccup hh)))
          out)))

(def style2object (style)
     ;; does not have .name and .value when passed a style object
     (var rtn {})
     (each (i) (range style.length)
           (var key (get style i)
                val (get style key))
           (when (!= val "initial")
            (set rtn key val)))
     rtn)

(def attr2object (attr)
     ;; has .name and .value when passed a DOM element.attributes object;
     (var rtn {})
     (each (i) (range attr.length)
           (var key (get attr i "name")
                val (get attr key "value"))
           (set rtn key val))
     rtn)

(def dom2miccup (el)
     ;; DOM element tree to miccup
     (if (not el) el
         (not el.tagName)  el.textContent

         true
         (scoped
          (var rtn [(el.tagName.toLowerCase)
                    (scoped
                     (var style (style2object el.style)
                          attr (attr2object el.attributes))
                     ;; don't output style if it's empty
                     (when (< 0 (|> (Object.keys style)
                                    (get "length")))
                           (set attr "style" style))
                     attr)])
          (each (node i) el.childNodes
                (rtn.push (dom2miccup node)))
          rtn)))

(def resolve-asset-dir (dirname)
     (|> (path.join global.__dirname dirname)
         (path.resolve)))

;; yaml based data control
(var jsyaml (require "js-yaml")
     fs (require "fs")
     electron (require "electron")
     __session-dir-path (resolve-asset-dir "session")
     __handler-dir-path (resolve-asset-dir "handler")
     __plugin-dir-name "plugin"
     __plugin-dir-path (resolve-asset-dir __plugin-dir-name))

;; housekeeping
(when (not (fs.existsSync __session-dir-path))
      (fs.mkdirSync __session-dir-path))

(var control-state {session-list: (m.prop [])
                    handler-mapping: (m.prop {})
                    plugin-mapping: (m.prop {})
                    active-session: (m.prop)})

(var WebViewDriver { exec: (#(channel arg)
                       (var func (get WebViewDriver channel))
                       (when func (func arg))) })
(set WebViewDriver Const.WEBVIEW_ELEMENT_CLICK
     (#(js)
       (var asess (control-state.active-session))
       (if (not asess)
           (alert "no active session")
           (m-transact!
            (var locater (JSON.parse js))
            (asess.history.push locater)
            (set asess 'is-dirty true)
            (control-state.active-session asess)))))

(set window 'WebViewDriver WebViewDriver)

(def load-all-sessions! ()
     (fs.readdir
      __session-dir-path
      (#(err file-list)
        (var re-yml (regex "yml$"))
        (m-transact!
         (control-state.session-list
          (|> file-list
              (.filter (#(fname)
                         (fname.match re-yml)))
              (.map (#(fname)
                      (|> (path.join __session-dir-path fname)
                          (fs.readFileSync "utf-8")
                          (jsyaml.safeLoad)
                          (tap (set 'filename fname)))))))))))
(load-all-sessions!)

(def load-all-plugins! ()
     (fs.readdir
      __plugin-dir-path
      (#(err file-list)
        (var out {})
        (each (fname i) file-list
              (var spl (fname.split ".")
                   basename (if (< 1 spl.length)
                                (fname.substring
                                 0 (- fname.length 1
                                      (get (last spl) 'length))))
                   ext (if (= 1 spl.length)
                           null
                           (last spl)))
              (when (= ext "js")
                    (if (get out basename)
                        (console.log "skipping: " fname "because already loaded")
                        (set out basename
                             (require (+ "./" (path.join __plugin-dir-name fname)))))))
        (m-transact!
         (control-state.plugin-mapping out)))))
(load-all-plugins!)

(def make-session (url name)
     {url: url
      name: name
      history: []
      })
(var ui-state {selected-tab: (m.prop 'saved-urls)
               scratch-view: (m.prop)})

(def render-session-list (session-list)
     (var asess (control-state.active-session)
          td-style {border: "1px solid gray"
                    padding: "0.5em" }
          ;; STRUCTURE: [key, [header?], [renderer?]]
          ;; - key
          ;; - use 2nd as header if present
          ;; - use last as renderer if a function
          hdr-list [['history
                     "# actions"
                     (#(hist)
                       (+ ""
                          (get hist 'length)
                          " actions"))]
                    ['name]
                    ['url]
                    ['filename]
                    ])
     ["table"
      {style: {border-collapse: "collapse"
               border: "1px solid black"
               width: "100%"
               padding: "0.5em"}
       }
      ["tr"
       (mapcar (#(hdr)
                 ["th" (if (typeof (= "string" (second hdr)))
                           (second hdr)
                           (first hdr))])
               hdr-list)]
      (mapcar (#(sess)
                ["tr"
                 {style: {border: "1px solid gray"
                          background: (if (= sess.filename
                                             (maybe-get asess 'filename))
                                          "yellow"
                                          "")}
                  onclick: (#>
                            (control-state.active-session sess)
                            (ui-state.selected-tab 'action-list))
                  }
                 (mapcar
                  (#(hdr)
                    (var key (first hdr)
                         maybe-func (last hdr)
                         renderer (if (= "function" (typeof maybe-func))
                                      maybe-func
                                      identity))
                    ["td"
                     {style: td-style }
                     (renderer (get sess key))])
                  hdr-list)])
              session-list)])

(def action-list-item (locater i)
     ["li"
      ["div"
       (scoped
        ;; delete button
        (var asess (control-state.active-session)
             cur-hist asess.history)
        ["button"
         {style: {margin: "0.2em"
                  width: "1.3em"
                  height: "1.3em"
                  lineHeight: "1.3em"
                  color: "white"
                  align: "center"
                  textAlign: "center"
                  verticalAlign: "middle"
                  borderRadius: "3px"
                  backgroundColor: "red" }
          onclick: (#>
                    (var head (cur-hist.slice 0 i)
                         tail (cur-hist.slice (+ 1 i)))
                    (set asess 'history (head.concat tail))
                    (set asess 'is-dirty true)
                    (control-state.active-session asess)) }
         ["i" {class: "fa fa-times" } ]])
       ["button"
        {onclick: (#>
                   (var exec-string
                        (if (or (= locater.tag "button")
                                (= locater.tag "a")
                                (and (= locater.tag "input")
                                     (or (= locater.type "submit")
                                         (= locater.type "button"))))
                            (+ "common.click_selector('" locater.selector "')")
                            
                            true
                            (+ "document.querySelector('"
                               locater.selector
                               "').scrollIntoView({behavior: \"smooth\"})")
                            
                            null
                            ;; (+ "common.fire_event_on('" locater.selector "', 'Click')")
                            ))
                   (when exec-string
                         (|> (get_webview)
                             (execjs
                              exec-string)))
                   ) }
        (JSON.stringify locater)]]])
(def action-list-view ()
     (var sess (control-state.active-session))
     (if sess
         ["div"
          (if sess.name
              ["h1" sess.name]
              "")
          ["hr"]
          ["a"
           {style: {margin: "0.2em"
                    padding: "0.1em"
                    border: "1px solid blue"
                    background: "lightblue"
                    border-radius: "4px"
                    cursor: "pointer"}
            onclick: (#> (set-webview-url sess.url))}
           sess.url]
          ["hr"]
          ["ol"
           {style: {margin: "0.5em"
                    padding: "0.5em"}}
           (mapcar action-list-item sess.history)
           (when (get sess 'is-dirty)
                 [["hr"]
                  ["button"
                   {onclick: (#>
                              (m-transact!
                               (delete sess.is-dirty)
                               (var new-session-list [])
                               (each (iter-sess) (control-state.session-list)
                                     (new-session-list.push
                                      (if (= iter-sess.filename
                                             sess.filename)
                                          sess
                                          iter-sess)))
                               (control-state.session-list new-session-list)
                               (control-state.active-session sess)
                               (var filepath (path.join __session-dir-path sess.filename))
                               (fs.writeFile
                                filepath
                                (jsyaml.safeDump sess)
                                (#(err)
                                  (if err
                                      (alert (+ "file write failed!\n"
                                                (.toString err)))
                                      (console.log (+ "wrote: " filepath)))))
                               ))}
                   "save!"]])]]))

(def plugin-list-view ()
     ["div"
      ["ol"
       {style: {margin: "0.5em"
                padding: "0.5em"}}
       (|> (control-state.plugin-mapping)
           (Object.keys)
           (mapcar (#(k)
                     ["li" k])
                   #))]])

(var ui {controller: (#>
                      (console.info "in controller")
                      {})
         tab-def: {saved-urls: {label: "saved urls"

                                ;; find out nicer way to DRY
                                bare-state: {name: null
                                             url: null}
                                state: (m.prop {name: null
                                                url: null})
                                render: (#>
                                         (var self this)
                                         [ ["b" "new session"]
                                          ["hr"]
                                          ["div"
                                           ["div"
                                            ["label"
                                             ["input"
                                              {type: "text"
                                               placeholder: "url"
                                               size: 40
                                               onchange: (#(evt)
                                                           (var cur-state (self.state))
                                                           (set cur-state 'url evt.target.value)
                                                           (self.state cur-state)
                                                           )} ]
                                             "session url" ]]
                                           ["div"
                                            ["label"
                                             ["input"
                                              {type: "text"
                                               placeholder: "name"
                                               size: 40
                                               onchange: (#(evt)
                                                           (var cur-state (self.state))
                                                           (set cur-state 'name evt.target.value)
                                                           (self.state cur-state)
                                                           )}]
                                             "session name (optional)"]]
                                           ["div"
                                            ["button"
                                             {onclick: (#>
                                                        (var lstate (self.state)
                                                             url (get lstate 'url)
                                                             name (get lstate 'name))
                                                        (when (and url name)
                                                              (var new-session (make-session url name))
                                                              (set new-session 'filename
                                                                   (|> (new Date)
                                                                       (.toISOString)
                                                                       (.substring 0 10)
                                                                       (+ "_"
                                                                          (.replace (get new-session 'url)
                                                                                    (regex "^(.+://)")
                                                                                    "")
                                                                          ".yml")))
                                                              (m-transact!
                                                               (self.state self.bare-state)
                                                               (|> (control-state.session-list)
                                                                   (.push new-session))
                                                               (control-state.active-session
                                                                new-session)))
                                                        )}
                                             "start new session"]]
                                           ]
                                          ["hr"]
                                          ["b" "sessions:"]
                                          ["hr"]
                                          (render-session-list
                                           (control-state.session-list)
                                           )]
                                         )
                                }
                   action-list: {label: "action list"
                                 render: action-list-view}

                   plugin-list: {label: "plugin list"
                                  render: plugin-list-view}

                   scratch: {label: "scratch"
                             render: (#>
                                      (m-miccup (ui-state.scratch-view)))}}
         view: (#(ctrl)
                 (var self this ;; self.view is the view object here, for example
                      table (|> (miccup
                                 ["div"
                                  {style: {position: "relative"
                                           float: "left"
                                           background: "#444"
                                           color: "#fff"
                                           padding: "2px"
                                           margin: "2px"
                                           width: "100%"
                                           height: "100%"
                                           } }
                                  ["style"
                                   "ul.tab-list { list-style-type: none }"
                                   "ul.tab-list li { float: left; border: 1px solid red; margin: 2px; padding: 2px; width: 100px; }"
                                   "ul.tab-list li:hover { background: gray; color: black; }"
                                   "ul.tab-list li.active { background: white; color: black; }"
                                   ]
                                  (scoped
                                   ["ul.tab-list"
                                    {}
                                    (mapcar (#(k i)
                                              [(+ "li"
                                                  (if (= k (ui-state.selected-tab))
                                                      ".active"
                                                      ""))
                                               {onclick: (#>
                                                          (ui-state.selected-tab k)) }
                                               (get self.tab-def k 'label)])
                                            (Object.keys self.tab-def))
                                    ])
                                  ["div" {style: {clear: "both" } }]
                                  ["div"
                                   {style: {width: "100%"
                                            height: "100%"
                                            color: "black"
                                            background: "white"
                                            }}
                                   ;; note function call
                                   ((|> (ui-state.selected-tab)
                                        (get self.tab-def #)
                                        (get 'render)))
                                   ]
                                  ]))))})
(m.mount (document.getElementById "control-container")
         ui)
